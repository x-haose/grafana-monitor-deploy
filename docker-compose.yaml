networks:
    loki:


services:
    # loki读
    loki-read:
        image: grafana/loki:latest
        container_name: loki-read
        restart: unless-stopped
        command: "-config.file=/etc/loki/config.yaml -target=read"
        ports:
            - "${LOKI_READ_PORT}:3100"
            - 7946
            - 9095
        volumes:
            - ./config/loki/config.yaml:/etc/loki/config.yaml
        depends_on:
            - minio
        healthcheck:
            test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks: &loki-dns
            loki:
                aliases:
                    - loki

    # loki写
    loki-write:
        image: grafana/loki:latest
        container_name: loki-write
        restart: unless-stopped
        command: "-config.file=/etc/loki/config.yaml -target=write"
        ports:
            - "${LOKI_WRITE_PORT}:3100"
            - 7946
            - 9095
        volumes:
            - ./config/loki/config.yaml:/etc/loki/config.yaml
        healthcheck:
            test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
            interval: 10s
            timeout: 5s
            retries: 5
        depends_on:
            - minio
        networks:
            <<: *loki-dns

    # loki后端
    loki-backend:
        image: grafana/loki:latest
        container_name: loki-backend
        restart: unless-stopped
        volumes:
            - ./config/loki/config.yaml:/etc/loki/config.yaml
        ports:
            - "3100"
            - "7946"
        command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
        depends_on:
            - loki-gateway
        networks:
            - loki

    # 收集日志
    alloy:
        image: grafana/alloy:latest
        container_name: alloy
        restart: unless-stopped
        volumes:
            - ./config/alloy/config.yaml:/etc/alloy/config.alloy:ro
            - /var/run/docker.sock:/var/run/docker.sock
        command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
        ports:
            - "${ALLOY_PORT}:12345"
        depends_on:
            - loki-gateway
        networks:
            - loki

    # 对象存储
    minio:
        image: minio/minio
        container_name: minio
        restart: unless-stopped
        entrypoint:
            - sh
            - -euc
            - |
              mkdir -p /data/loki-data && \
              mkdir -p /data/loki-ruler && \
              minio server /data
        environment:
            - MINIO_ROOT_USER=${MINIO_ROOT_USER}
            - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
            - MINIO_PROMETHEUS_AUTH_TYPE=public
            - MINIO_UPDATE=off
        ports:
            - 9000
        volumes:
            - minio-data:/data
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
            interval: 15s
            timeout: 20s
            retries: 5
        networks:
            - loki

    # 基于 Web 的指标 UI 可视化
    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        restart: unless-stopped
        environment:
            - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
            - GF_AUTH_ANONYMOUS_ENABLED=${GF_AUTH_ANONYMOUS_ENABLED}
            - GF_AUTH_ANONYMOUS_ORG_ROLE=${GF_AUTH_ANONYMOUS_ORG_ROLE}
            - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
            - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
            - GF_USERS_DEFAULT_LANGUAGE=${GF_USERS_DEFAULT_LANGUAGE}
        volumes:
            - grafana-data:/var/lib/grafana
            - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
            - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
        depends_on:
            - loki-gateway
        ports:
            - "127.0.0.1:40020:3000"
        healthcheck:
            test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - loki

    # loki 读写整合网关
    loki-gateway:
        image: nginx:latest
        container_name: loki-gateway
        restart: unless-stopped
        depends_on:
            - loki-read
            - loki-write
        entrypoint:
            - sh
            - -euc
            - |
              cat <<EOF > /etc/nginx/nginx.conf
              user  nginx;
              worker_processes  5;  ## Default: 1

              events {
                worker_connections   1000;
              }

              http {
                resolver 127.0.0.11;

                server {
                  listen             3100;

                  location = / {
                    return 200 'OK';
                    auth_basic off;
                  }

                  location = /api/prom/push {
                    proxy_pass       http://loki-write:3100\$$request_uri;
                  }

                  location = /api/prom/tail {
                    proxy_pass       http://loki-read:3100\$$request_uri;
                    proxy_set_header Upgrade \$$http_upgrade;
                    proxy_set_header Connection "upgrade";
                  }

                  location ~ /api/prom/.* {
                    proxy_pass       http://loki-read:3100\$$request_uri;
                  }

                  location = /loki/api/v1/push {
                    proxy_pass       http://loki-write:3100\$$request_uri;
                  }

                  location = /loki/api/v1/tail {
                    proxy_pass       http://loki-read:3100\$$request_uri;
                    proxy_set_header Upgrade \$$http_upgrade;
                    proxy_set_header Connection "upgrade";
                  }

                  location ~ /loki/api/.* {
                    proxy_pass       http://loki-read:3100\$$request_uri;
                  }
                }
              }
              EOF
              /docker-entrypoint.sh nginx -g "daemon off;"
        ports:
            - "127.0.0.1:40010:3100"
        healthcheck:
            test: [ "CMD", "service", "nginx", "status" ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - loki

    # 监控系统和指标数据库
    prometheus:
        image: prom/prometheus:v2.47.0
        container_name: prometheus
        restart: unless-stopped
        user: root
        depends_on:
            - cadvisor
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention.time=240h'
            - '--web.enable-lifecycle'
        volumes:
            - prometheus-data:/prometheus
            - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        expose:
            - 8080
        networks:
            - loki

    # 主机指标
    node_exporter:
        image: prom/node-exporter:v1.8.2
        container_name: node_exporter
        restart: unless-stopped
        command:
            - '--path.procfs=/host/proc'
            - '--path.rootfs=/rootfs'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        expose:
            - 8080
        networks:
            - loki

    # docker 容器指标
    cadvisor:
        image: gcr.io/cadvisor/cadvisor:v0.52.1
        container_name: cadvisor
        restart: unless-stopped
        privileged: true
        devices:
            - /dev/kmsg:/dev/kmsg
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:ro
            - /sys:/sys:ro
            - /var/lib/docker:/var/lib/docker:ro
            - /dev/disk/:/dev/disk:ro
        expose:
            - 8080
        networks:
            - loki
